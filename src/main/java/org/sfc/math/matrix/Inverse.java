/*
 * Copyright (c) 2007 Thomas Weise for sigoa
 * Simple Interface for Global Optimization Algorithms
 * http://www.sigoa.org/
 * 
 * E-Mail           : info@sigoa.org
 * Creation Date    : 2007-12-30
 * Creator          : Thomas Weise
 * Original Filename: org.sfc.math.matrix.Inverse.java
 * Last modification: 2007-12-30
 *                by: Thomas Weise
 * 
 * License          : GNU LESSER GENERAL PUBLIC LICENSE
 *                    Version 2.1, February 1999
 *                    You should have received a copy of this license along
 *                    with this library; if not, write to theFree Software
 *                    Foundation, Inc. 51 Franklin Street, Fifth Floor,
 *                    Boston, MA 02110-1301, USA or download the license
 *                    under http://www.gnu.org/licenses/lgpl.html or
 *                    http://www.gnu.org/copyleft/lesser.html.
 *                    
 * Warranty         : This software is provided "as is" without any
 *                    warranty; without even the implied warranty of
 *                    merchantability or fitness for a particular purpose.
 *                    See the Gnu Lesser General Public License for more
 *                    details.
 */

package org.sfc.math.matrix;

/**
 * To calculate the inverse of a matrix, two different approaches are used.
 * 1. For small matrices, hard coded Laplace-Development with partioning
 * the matrix into sub-matrices. Dij = det (A / (row i, col j)) A^-1 =
 * (1/det A) * matrix of the Dij^T It's code was auto-generated by the code
 * generator that can be found in the archive
 * /doc/matrix/code_generators.zip. It is not guaranteed that the generated
 * code will be the global optimum, however, it is a local optimum. 2. On
 * bigger matrices, it seems to be fastest to use the L-U decomposition for
 * inversion.
 */
public final class Inverse {
  /** private interface to calculate the inverse matrix */
  private static interface IDirectInverse {
    /**
     * calculate the inverse matrix
     * 
     * @param mat
     *          The input matrix data
     * @param result
     *          The output: the inverted matrix
     */
    public void invert(double[] mat, double[] result);
  }

  /** the array of the fast inverse code */
  private final static IDirectInverse[] FAST_INVERSE = {
  // l = 1, that means we handle all 1x1 matrices here
      new IDirectInverse() {
        public void invert(double[] mat, double[] result) {
          result[0] = 1.0 / mat[0];
        }
      },
      // l = 2, that means we handle all 2x2 matrices here
      new IDirectInverse() {
        public void invert(double[] mat, double[] result) {
          double d0, d1, d2, d3, d4;

          d0 = mat[0];
          d1 = mat[1];
          d2 = mat[2];
          d3 = mat[3];

          d4 = 1.0 / ((d0 * d3) - (d1 * d2));

          result[0] = d3 * d4;
          result[1] = d1 * d4;
          result[2] = d2 * d4;
          result[3] = d0 * d4;
        }
      },

      // l = 3, that means we handle all 3x3 matrices here
      new IDirectInverse() {
        public void invert(double[] mat, double[] result) {
          /* 13 variables */

          double d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13;

          d1 = mat[3];
          d2 = mat[7];
          d3 = mat[5];
          d4 = mat[1];
          d5 = mat[0];
          d6 = mat[2];
          d7 = mat[4];
          d8 = mat[8];
          d9 = ((d7 * d8) - (d3 * d2));
          d10 = mat[6];
          d11 = ((d1 * d8) - (d3 * d10));
          d12 = ((d1 * d2) - (d7 * d10));
          d13 = (1.0 / ((d5 * d9) - (d4 * d11) + (d6 * d12)));
          result[0] = (d13 * d9);
          result[6] = (d13 * d12);
          result[4] = (d13 * ((d5 * d8) - (d6 * d10)));
          result[2] = (d13 * ((d4 * d3) - (d6 * d7)));
          result[8] = (d13 * ((d5 * d7) - (d4 * d1)));
          d7 = (-d13);
          result[3] = (d7 * d11);
          result[1] = (d7 * ((d4 * d8) - (d6 * d2)));
          result[7] = (d7 * ((d5 * d2) - (d4 * d10)));
          result[5] = (d7 * ((d5 * d3) - (d6 * d1)));

        }
      },
      // l = 4, that means we handle all 4x4 matrices here
      new IDirectInverse() {
        public void invert(double[] mat, double[] result) {
          /* 31 variables */

          double d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31;

          d1 = mat[14];
          d2 = mat[10];
          d3 = mat[9];
          d4 = mat[7];
          d5 = mat[8];
          d6 = mat[12];
          d7 = mat[15];
          d8 = mat[4];
          d9 = mat[5];
          d10 = mat[6];
          d11 = ((d5 * d1) - (d2 * d6));
          d12 = mat[13];
          d13 = ((d5 * d12) - (d3 * d6));
          d14 = ((d3 * d1) - (d2 * d12));
          d15 = mat[11];
          d16 = ((d8 * d1) - (d10 * d6));
          d17 = ((d9 * d2) - (d10 * d3));
          d18 = ((d8 * d3) - (d9 * d5));
          d19 = ((d10 * d15) - (d4 * d2));
          d20 = ((d8 * d15) - (d4 * d5));
          d21 = ((d8 * d2) - (d10 * d5));
          d22 = ((d8 * d7) - (d4 * d6));
          d23 = ((d8 * d14) - (d9 * d11) + (d10 * d13));
          d24 = ((d10 * d7) - (d4 * d1));
          d25 = ((d9 * d7) - (d4 * d12));
          d26 = ((d9 * d1) - (d10 * d12));
          d27 = mat[1];
          d28 = mat[0];
          d29 = mat[2];
          d30 = mat[3];
          d31 = ((d3 * d7) - (d15 * d12));
          d1 = ((d2 * d7) - (d15 * d1));
          d2 = ((d9 * d1) - (d10 * d31) + (d4 * d14));
          d5 = ((d5 * d7) - (d15 * d6));
          d7 = ((d8 * d31) - (d9 * d5) + (d4 * d13));
          d10 = ((d8 * d1) - (d10 * d5) + (d4 * d11));
          d3 = ((d9 * d15) - (d4 * d3));
          d4 = ((d8 * d12) - (d9 * d6));
          d6 = (1.0 / ((d28 * d2) - (d27 * d10) + (d29 * d7) - (d30 * d23)));
          result[0] = (d6 * d2);
          result[8] = (d6 * d7);
          result[5] = (d6 * ((d28 * d1) - (d29 * d5) + (d30 * d11)));
          result[13] = (d6 * ((d28 * d14) - (d27 * d11) + (d29 * d13)));
          result[2] = (d6 * ((d27 * d24) - (d29 * d25) + (d30 * d26)));
          result[10] = (d6 * ((d28 * d25) - (d27 * d22) + (d30 * d4)));
          result[7] = (d6 * ((d28 * d19) - (d29 * d20) + (d30 * d21)));
          result[15] = (d6 * ((d28 * d17) - (d27 * d21) + (d29 * d18)));
          d2 = (-d6);
          result[4] = (d2 * d10);
          result[12] = (d2 * d23);
          result[1] = (d2 * ((d27 * d1) - (d29 * d31) + (d30 * d14)));
          result[9] = (d2 * ((d28 * d31) - (d27 * d5) + (d30 * d13)));
          result[6] = (d2 * ((d28 * d24) - (d29 * d22) + (d30 * d16)));
          result[14] = (d2 * ((d28 * d26) - (d27 * d16) + (d29 * d4)));
          result[3] = (d2 * ((d27 * d19) - (d29 * d3) + (d30 * d17)));
          result[11] = (d2 * ((d28 * d3) - (d27 * d20) + (d30 * d18)));

        }
      },
      // l = 5, that means we handle all 5x5 matrices here
      new IDirectInverse() {
        public void invert(double[] mat, double[] result) {
          /* 72 variables */

          double d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, d42, d43, d44, d45, d46, d47, d48, d49, d50, d51, d52, d53, d54, d55, d56, d57, d58, d59, d60, d61, d62, d63, d64, d65, d66, d67, d68, d69, d70, d71, d72;

          d1 = mat[5];
          d2 = mat[9];
          d3 = mat[6];
          d4 = mat[8];
          d5 = mat[7];
          d6 = mat[16];
          d7 = mat[24];
          d8 = mat[22];
          d9 = mat[15];
          d10 = mat[19];
          d11 = mat[17];
          d12 = mat[20];
          d13 = mat[23];
          d14 = mat[18];
          d15 = ((d9 * d8) - (d11 * d12));
          d16 = mat[11];
          d17 = mat[14];
          d18 = mat[10];
          d19 = mat[12];
          d20 = mat[13];
          d21 = ((d19 * d10) - (d17 * d11));
          d22 = mat[21];
          d23 = ((d20 * d7) - (d17 * d13));
          d24 = ((d19 * d13) - (d20 * d8));
          d25 = ((d19 * d14) - (d20 * d11));
          d26 = ((d16 * d11) - (d19 * d6));
          d27 = ((d20 * d10) - (d17 * d14));
          d28 = ((d16 * d10) - (d17 * d6));
          d29 = ((d16 * d14) - (d20 * d6));
          d30 = ((d5 * d27) - (d4 * d21) + (d2 * d25));
          d31 = ((d3 * d27) - (d4 * d28) + (d2 * d29));
          d32 = ((d3 * d21) - (d5 * d28) + (d2 * d26));
          d33 = ((d3 * d25) - (d5 * d29) + (d4 * d26));
          d34 = ((d19 * d7) - (d17 * d8));
          d35 = ((d18 * d7) - (d17 * d12));
          d36 = ((d18 * d8) - (d19 * d12));
          d37 = ((d5 * d23) - (d4 * d34) + (d2 * d24));
          d38 = ((d18 * d13) - (d20 * d12));
          d39 = ((d1 * d34) - (d5 * d35) + (d2 * d36));
          d40 = ((d1 * d24) - (d5 * d38) + (d4 * d36));
          d41 = ((d6 * d8) - (d11 * d22));
          d42 = ((d11 * d7) - (d10 * d8));
          d43 = ((d6 * d13) - (d14 * d22));
          d44 = ((d6 * d7) - (d10 * d22));
          d45 = ((d9 * d7) - (d10 * d12));
          d46 = ((d11 * d13) - (d14 * d8));
          d47 = ((d16 * d42) - (d19 * d44) + (d17 * d41));
          d48 = ((d9 * d22) - (d6 * d12));
          d49 = ((d18 * d42) - (d19 * d45) + (d17 * d15));
          d50 = ((d14 * d7) - (d10 * d13));
          d51 = ((d9 * d13) - (d14 * d12));
          d52 = ((d19 * d50) - (d20 * d42) + (d17 * d46));
          d53 = ((d18 * d44) - (d16 * d45) + (d17 * d48));
          d54 = ((d18 * d41) - (d16 * d15) + (d19 * d48));
          d55 = ((d18 * d43) - (d16 * d51) + (d20 * d48));
          d56 = mat[1];
          d57 = mat[0];
          d58 = mat[2];
          d59 = mat[3];
          d60 = mat[4];
          d13 = ((d16 * d13) - (d20 * d22));
          d61 = ((d16 * d50) - (d20 * d44) + (d17 * d43));
          d62 = ((d16 * d46) - (d19 * d43) + (d20 * d41));
          d63 = ((d18 * d50) - (d20 * d45) + (d17 * d51));
          d64 = ((d1 * d61) - (d3 * d63) + (d4 * d53) - (d2 * d55));
          d65 = ((d18 * d46) - (d19 * d51) + (d20 * d15));
          d66 = ((d1 * d62) - (d3 * d65) + (d5 * d55) - (d4 * d54));
          d67 = ((d3 * d52) - (d5 * d61) + (d4 * d47) - (d2 * d62));
          d68 = ((d1 * d52) - (d5 * d63) + (d4 * d49) - (d2 * d65));
          d69 = ((d1 * d47) - (d3 * d49) + (d5 * d53) - (d2 * d54));
          d70 = ((d1 * d42) - (d5 * d45) + (d2 * d15));
          d71 = ((d1 * d46) - (d5 * d51) + (d4 * d15));
          d15 = ((d1 * d41) - (d3 * d15) + (d5 * d48));
          d72 = ((d1 * d50) - (d4 * d45) + (d2 * d51));
          d45 = ((d1 * d44) - (d3 * d45) + (d2 * d48));
          d48 = ((d1 * d43) - (d3 * d51) + (d4 * d48));
          d51 = ((d5 * d50) - (d4 * d42) + (d2 * d46));
          d50 = ((d3 * d50) - (d4 * d44) + (d2 * d43));
          d42 = ((d3 * d42) - (d5 * d44) + (d2 * d41));
          d41 = ((d3 * d46) - (d5 * d43) + (d4 * d41));
          d8 = ((d16 * d8) - (d19 * d22));
          d7 = ((d16 * d7) - (d17 * d22));
          d34 = ((d3 * d34) - (d5 * d7) + (d2 * d8));
          d6 = ((d18 * d6) - (d16 * d9));
          d10 = ((d18 * d10) - (d17 * d9));
          d14 = ((d18 * d14) - (d20 * d9));
          d9 = ((d18 * d11) - (d19 * d9));
          d11 = ((d1 * d29) - (d3 * d14) + (d4 * d6));
          d17 = ((d1 * d25) - (d5 * d14) + (d4 * d9));
          d14 = ((d1 * d27) - (d4 * d10) + (d2 * d14));
          d19 = ((d3 * d24) - (d5 * d13) + (d4 * d8));
          d12 = ((d18 * d22) - (d16 * d12));
          d16 = ((d3 * d23) - (d4 * d7) + (d2 * d13));
          d7 = ((d1 * d7) - (d3 * d35) + (d2 * d12));
          d13 = ((d1 * d13) - (d3 * d38) + (d4 * d12));
          d4 = ((d1 * d23) - (d4 * d35) + (d2 * d38));
          d8 = ((d1 * d8) - (d3 * d36) + (d5 * d12));
          d12 = ((d1 * d21) - (d5 * d10) + (d2 * d9));
          d2 = ((d1 * d28) - (d3 * d10) + (d2 * d6));
          d1 = ((d1 * d26) - (d3 * d9) + (d5 * d6));
          d3 = (1.0 / ((d57 * d67) - (d56 * d68) + (d58 * d64)
              - (d59 * d69) + (d60 * d66)));
          result[0] = (d3 * d67);
          result[10] = (d3 * d64);
          result[20] = (d3 * d66);
          result[6] = (d3 * ((d57 * d52) - (d58 * d63) + (d59 * d49) - (d60 * d65)));
          result[16] = (d3 * ((d57 * d47) - (d56 * d49) + (d58 * d53) - (d60 * d54)));
          result[2] = (d3 * ((d56 * d51) - (d58 * d50) + (d59 * d42) - (d60 * d41)));
          result[12] = (d3 * ((d57 * d50) - (d56 * d72) + (d59 * d45) - (d60 * d48)));
          result[22] = (d3 * ((d57 * d41) - (d56 * d71) + (d58 * d48) - (d59 * d15)));
          result[8] = (d3 * ((d57 * d37) - (d58 * d4) + (d59 * d39) - (d60 * d40)));
          result[18] = (d3 * ((d57 * d34) - (d56 * d39) + (d58 * d7) - (d60 * d8)));
          result[4] = (d3 * ((d56 * d30) - (d58 * d31) + (d59 * d32) - (d60 * d33)));
          result[14] = (d3 * ((d57 * d31) - (d56 * d14) + (d59 * d2) - (d60 * d11)));
          result[24] = (d3 * ((d57 * d33) - (d56 * d17) + (d58 * d11) - (d59 * d1)));
          d3 = (-d3);
          result[5] = (d3 * d68);
          result[15] = (d3 * d69);
          result[1] = (d3 * ((d56 * d52) - (d58 * d61) + (d59 * d47) - (d60 * d62)));
          result[11] = (d3 * ((d57 * d61) - (d56 * d63) + (d59 * d53) - (d60 * d55)));
          result[21] = (d3 * ((d57 * d62) - (d56 * d65) + (d58 * d55) - (d59 * d54)));
          result[7] = (d3 * ((d57 * d51) - (d58 * d72) + (d59 * d70) - (d60 * d71)));
          result[17] = (d3 * ((d57 * d42) - (d56 * d70) + (d58 * d45) - (d60 * d15)));
          result[3] = (d3 * ((d56 * d37) - (d58 * d16) + (d59 * d34) - (d60 * d19)));
          result[13] = (d3 * ((d57 * d16) - (d56 * d4) + (d59 * d7) - (d60 * d13)));
          result[23] = (d3 * ((d57 * d19) - (d56 * d40) + (d58 * d13) - (d59 * d8)));
          result[9] = (d3 * ((d57 * d30) - (d58 * d14) + (d59 * d12) - (d60 * d17)));
          result[19] = (d3 * ((d57 * d32) - (d56 * d12) + (d58 * d2) - (d60 * d1)));

        }
      },
      // l = 6, that means we handle all 6x6 matrices here
      new IDirectInverse() {
        public void invert(double[] mat, double[] result) {
          /* 136 variables */

          double d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, d42, d43, d44, d45, d46, d47, d48, d49, d50, d51, d52, d53, d54, d55, d56, d57, d58, d59, d60, d61, d62, d63, d64, d65, d66, d67, d68, d69, d70, d71, d72, d73, d74, d75, d76, d77, d78, d79, d80, d81, d82, d83, d84, d85, d86, d87, d88, d89, d90, d91, d92, d93, d94, d95, d96, d97, d98, d99, d100, d101, d102, d103, d104, d105, d106, d107, d108, d109, d110, d111, d112, d113, d114, d115, d116, d117, d118, d119, d120, d121, d122, d123, d124, d125, d126, d127, d128, d129, d130, d131, d132, d133, d134, d135, d136;

          d1 = mat[34];
          d2 = mat[23];
          d3 = mat[20];
          d4 = mat[19];
          d5 = mat[22];
          d6 = mat[25];
          d7 = mat[32];
          d8 = mat[35];
          d9 = mat[28];
          d10 = mat[26];
          d11 = mat[24];
          d12 = ((d10 * d1) - (d9 * d7));
          d13 = mat[29];
          d14 = mat[31];
          d15 = mat[30];
          d16 = mat[33];
          d17 = mat[21];
          d18 = ((d11 * d1) - (d9 * d15));
          d19 = mat[27];
          d20 = ((d11 * d16) - (d19 * d15));
          d21 = ((d11 * d7) - (d10 * d15));
          d22 = ((d6 * d8) - (d13 * d14));
          d23 = ((d10 * d8) - (d13 * d7));
          d24 = ((d9 * d8) - (d13 * d1));
          d25 = mat[18];
          d26 = ((d19 * d8) - (d13 * d16));
          d27 = ((d19 * d1) - (d9 * d16));
          d28 = mat[13];
          d29 = mat[17];
          d30 = mat[12];
          d31 = mat[14];
          d32 = mat[15];
          d33 = mat[16];
          d34 = mat[6];
          d35 = mat[11];
          d36 = mat[7];
          d37 = mat[8];
          d38 = mat[10];
          d39 = mat[9];
          d40 = ((d17 * d9) - (d5 * d19));
          d41 = ((d25 * d19) - (d17 * d11));
          d42 = ((d3 * d19) - (d17 * d10));
          d43 = ((d5 * d13) - (d2 * d9));
          d44 = ((d25 * d13) - (d2 * d11));
          d45 = ((d3 * d13) - (d2 * d10));
          d46 = ((d3 * d9) - (d5 * d10));
          d47 = ((d17 * d13) - (d2 * d19));
          d48 = ((d32 * d43) - (d33 * d47) + (d29 * d40));
          d49 = ((d31 * d43) - (d33 * d45) + (d29 * d46));
          d50 = ((d30 * d47) - (d32 * d44) + (d29 * d41));
          d51 = ((d31 * d40) - (d32 * d46) + (d33 * d42));
          d52 = ((d3 * d8) - (d2 * d7));
          d53 = ((d6 * d7) - (d10 * d14));
          d54 = ((d3 * d16) - (d17 * d7));
          d55 = ((d5 * d8) - (d2 * d1));
          d56 = ((d4 * d8) - (d2 * d14));
          d57 = ((d17 * d8) - (d2 * d16));
          d58 = ((d17 * d1) - (d5 * d16));
          d59 = ((d3 * d1) - (d5 * d7));
          d60 = ((d32 * d55) - (d33 * d57) + (d29 * d58));
          d61 = ((d31 * d55) - (d33 * d52) + (d29 * d59));
          d62 = ((d31 * d57) - (d32 * d52) + (d29 * d54));
          d63 = ((d4 * d1) - (d5 * d14));
          d64 = ((d10 * d16) - (d19 * d7));
          d65 = ((d25 * d27) - (d17 * d18) + (d5 * d20));
          d66 = ((d4 * d23) - (d3 * d22) + (d2 * d53));
          d67 = ((d25 * d12) - (d3 * d18) + (d5 * d21));
          d68 = ((d11 * d8) - (d13 * d15));
          d69 = ((d25 * d23) - (d3 * d68) + (d2 * d21));
          d70 = ((d25 * d24) - (d5 * d68) + (d2 * d18));
          d71 = ((d25 * d26) - (d17 * d68) + (d2 * d20));
          d72 = ((d3 * d26) - (d17 * d23) + (d2 * d64));
          d73 = ((d3 * d27) - (d17 * d12) + (d5 * d64));
          d74 = ((d3 * d24) - (d5 * d23) + (d2 * d12));
          d75 = ((d11 * d14) - (d6 * d15));
          d76 = ((d25 * d53) - (d4 * d21) + (d3 * d75));
          d77 = ((d25 * d22) - (d4 * d68) + (d2 * d75));
          d78 = ((d25 * d64) - (d3 * d20) + (d17 * d21));
          d79 = ((d4 * d7) - (d3 * d14));
          d80 = ((d30 * d74) - (d31 * d70) + (d33 * d69) - (d29 * d67));
          d81 = ((d6 * d1) - (d9 * d14));
          d82 = ((d17 * d24) - (d5 * d26) + (d2 * d27));
          d83 = ((d4 * d24) - (d5 * d22) + (d2 * d81));
          d84 = ((d31 * d82) - (d32 * d74) + (d33 * d72) - (d29 * d73));
          d85 = ((d6 * d16) - (d19 * d14));
          d86 = ((d30 * d72) - (d31 * d71) + (d32 * d69) - (d29 * d78));
          d87 = ((d4 * d26) - (d17 * d22) + (d2 * d85));
          d88 = ((d30 * d73) - (d31 * d65) + (d32 * d67) - (d33 * d78));
          d89 = ((d4 * d64) - (d3 * d85) + (d17 * d53));
          d90 = ((d30 * d66) - (d28 * d69) + (d31 * d77) - (d29 * d76));
          d19 = ((d4 * d19) - (d17 * d6));
          d13 = ((d4 * d13) - (d2 * d6));
          d91 = ((d4 * d10) - (d3 * d6));
          d7 = ((d25 * d7) - (d3 * d15));
          d1 = ((d25 * d1) - (d5 * d15));
          d2 = ((d25 * d8) - (d2 * d15));
          d8 = ((d28 * d26) - (d32 * d22) + (d29 * d85));
          d92 = ((d32 * d24) - (d33 * d26) + (d29 * d27));
          d93 = ((d31 * d26) - (d32 * d23) + (d29 * d64));
          d94 = ((d25 * d81) - (d4 * d18) + (d5 * d75));
          d95 = ((d34 * d74) - (d37 * d70) + (d38 * d69) - (d35 * d67));
          d96 = ((d34 * d73) - (d37 * d65) + (d39 * d67) - (d38 * d78));
          d97 = ((d31 * d27) - (d32 * d12) + (d33 * d64));
          d98 = ((d30 * d27) - (d32 * d18) + (d33 * d20));
          d99 = ((d30 * d64) - (d31 * d20) + (d32 * d21));
          d100 = ((d31 * d24) - (d33 * d23) + (d29 * d12));
          d101 = ((d30 * d24) - (d33 * d68) + (d29 * d18));
          d102 = ((d30 * d23) - (d31 * d68) + (d29 * d21));
          d103 = ((d30 * d12) - (d31 * d18) + (d33 * d21));
          d104 = ((d37 * d92) - (d39 * d100) + (d38 * d93) - (d35 * d97));
          d26 = ((d30 * d26) - (d32 * d68) + (d29 * d20));
          d105 = ((d34 * d100) - (d37 * d101) + (d38 * d102) - (d35 * d103));
          d106 = ((d34 * d93) - (d37 * d26) + (d39 * d102) - (d35 * d99));
          d107 = ((d34 * d97) - (d37 * d98) + (d39 * d103) - (d38 * d99));
          d108 = ((d34 * d72) - (d37 * d71) + (d39 * d69) - (d35 * d78));
          d109 = ((d30 * d83) - (d28 * d70) + (d33 * d77) - (d29 * d94));
          d110 = ((d25 * d85) - (d4 * d20) + (d17 * d75));
          d111 = ((d34 * d82) - (d39 * d70) + (d38 * d71) - (d35 * d65));
          d112 = ((d4 * d12) - (d3 * d81) + (d5 * d53));
          d113 = ((d30 * d89) - (d28 * d78) + (d31 * d110) - (d32 * d76));
          d114 = ((d4 * d27) - (d17 * d81) + (d5 * d85));
          d115 = ((d37 * d82) - (d39 * d74) + (d38 * d72) - (d35 * d73));
          d116 = ((d28 * d74) - (d31 * d83) + (d33 * d66) - (d29 * d112));
          d117 = ((d30 * d112) - (d28 * d67) + (d31 * d94) - (d33 * d76));
          d118 = ((d36 * d72) - (d37 * d87) + (d39 * d66) - (d35 * d89));
          d119 = ((d36 * d73) - (d37 * d114) + (d39 * d112) - (d38 * d89));
          d120 = ((d25 * d16) - (d17 * d15));
          d15 = ((d25 * d14) - (d4 * d15));
          d121 = ((d30 * d63) - (d28 * d1) + (d33 * d15));
          d122 = ((d30 * d57) - (d32 * d2) + (d29 * d120));
          d123 = ((d30 * d54) - (d31 * d120) + (d32 * d7));
          d124 = ((d30 * d58) - (d32 * d1) + (d33 * d120));
          d125 = ((d30 * d52) - (d31 * d2) + (d29 * d7));
          d126 = ((d30 * d56) - (d28 * d2) + (d29 * d15));
          d127 = ((d34 * d62) - (d37 * d122) + (d39 * d125) - (d35 * d123));
          d2 = ((d30 * d55) - (d33 * d2) + (d29 * d1));
          d128 = ((d25 * d6) - (d4 * d11));
          d129 = ((d30 * d13) - (d28 * d44) + (d29 * d128));
          d6 = ((d4 * d9) - (d5 * d6));
          d130 = ((d28 * d46) - (d31 * d6) + (d33 * d91));
          d131 = ((d28 * d42) - (d31 * d19) + (d32 * d91));
          d5 = ((d25 * d9) - (d5 * d11));
          d9 = ((d28 * d40) - (d32 * d6) + (d33 * d19));
          d132 = ((d28 * d43) - (d33 * d13) + (d29 * d6));
          d133 = ((d36 * d51) - (d37 * d9) + (d39 * d130) - (d38 * d131));
          d134 = ((d28 * d45) - (d31 * d13) + (d29 * d91));
          d135 = ((d31 * d58) - (d32 * d59) + (d33 * d54));
          d1 = ((d30 * d59) - (d31 * d1) + (d33 * d7));
          d7 = ((d30 * d79) - (d28 * d7) + (d31 * d15));
          d52 = ((d28 * d52) - (d31 * d56) + (d29 * d79));
          d136 = ((d34 * d61) - (d37 * d2) + (d38 * d125) - (d35 * d1));
          d125 = ((d34 * d52) - (d36 * d125) + (d37 * d126) - (d35 * d7));
          d4 = ((d4 * d16) - (d17 * d14));
          d14 = ((d28 * d59) - (d31 * d63) + (d33 * d79));
          d16 = ((d28 * d55) - (d33 * d56) + (d29 * d63));
          d15 = ((d30 * d4) - (d28 * d120) + (d32 * d15));
          d17 = ((d31 * d47) - (d32 * d45) + (d29 * d42));
          d13 = ((d28 * d47) - (d32 * d13) + (d29 * d19));
          d19 = ((d30 * d19) - (d28 * d41) + (d32 * d128));
          d40 = ((d30 * d40) - (d32 * d5) + (d33 * d41));
          d47 = ((d36 * d48) - (d39 * d132) + (d38 * d13) - (d35 * d9));
          d6 = ((d30 * d6) - (d28 * d5) + (d33 * d128));
          d55 = ((d34 * d13) - (d36 * d50) + (d39 * d129) - (d35 * d19));
          d3 = ((d25 * d10) - (d3 * d11));
          d10 = ((d30 * d45) - (d31 * d44) + (d29 * d3));
          d11 = ((d30 * d91) - (d28 * d3) + (d31 * d128));
          d25 = ((d34 * d116) - (d36 * d80) + (d37 * d109) - (d38 * d90) + (d35 * d117));
          d45 = ((d28 * d72) - (d31 * d87) + (d32 * d66) - (d29 * d89));
          d59 = ((d30 * d114) - (d28 * d65) + (d32 * d94) - (d33 * d110));
          d72 = ((d28 * d73) - (d31 * d114) + (d32 * d112) - (d33 * d89));
          d73 = ((d34 * d72) - (d36 * d88) + (d37 * d59) - (d39 * d117) + (d38 * d113));
          d67 = ((d34 * d112) - (d36 * d67) + (d37 * d94) - (d38 * d76));
          d91 = ((d28 * d82) - (d32 * d83) + (d33 * d87) - (d29 * d114));
          d120 = ((d34 * d83) - (d36 * d70) + (d38 * d77) - (d35 * d94));
          d128 = ((d36 * d84) - (d37 * d91) + (d39 * d116) - (d38 * d45) + (d35 * d72));
          d74 = ((d36 * d74) - (d37 * d83) + (d38 * d66) - (d35 * d112));
          d70 = ((d30 * d82) - (d32 * d70) + (d33 * d71) - (d29 * d65));
          d112 = ((d30 * d87) - (d28 * d71) + (d32 * d77) - (d29 * d110));
          d78 = ((d34 * d89) - (d36 * d78) + (d37 * d110) - (d39 * d76));
          d89 = ((d34 * d91) - (d36 * d70) + (d39 * d109) - (d38 * d112) + (d35 * d59));
          d82 = ((d36 * d82) - (d39 * d83) + (d38 * d87) - (d35 * d114));
          d65 = ((d34 * d114) - (d36 * d65) + (d39 * d94) - (d38 * d110));
          d83 = ((d34 * d45) - (d36 * d86) + (d37 * d112) - (d39 * d90) + (d35 * d113));
          d94 = ((d34 * d84) - (d37 * d70) + (d39 * d80) - (d38 * d86) + (d35 * d88));
          d66 = ((d34 * d66) - (d36 * d69) + (d37 * d77) - (d35 * d76));
          d69 = ((d34 * d87) - (d36 * d71) + (d39 * d77) - (d35 * d110));
          d71 = mat[1];
          d76 = mat[0];
          d77 = mat[2];
          d87 = mat[3];
          d110 = mat[4];
          d114 = mat[5];
          d21 = ((d30 * d53) - (d28 * d21) + (d31 * d75));
          d23 = ((d28 * d23) - (d31 * d22) + (d29 * d53));
          d18 = ((d30 * d81) - (d28 * d18) + (d33 * d75));
          d12 = ((d28 * d12) - (d31 * d81) + (d33 * d53));
          d53 = ((d28 * d64) - (d31 * d85) + (d32 * d53));
          d64 = ((d34 * d12) - (d36 * d103) + (d37 * d18) - (d38 * d21));
          d27 = ((d28 * d27) - (d32 * d81) + (d33 * d85));
          d24 = ((d28 * d24) - (d33 * d22) + (d29 * d81));
          d81 = ((d36 * d97) - (d37 * d27) + (d39 * d12) - (d38 * d53));
          d12 = ((d36 * d100) - (d37 * d24) + (d38 * d23) - (d35 * d12));
          d93 = ((d36 * d93) - (d37 * d8) + (d39 * d23) - (d35 * d53));
          d22 = ((d30 * d22) - (d28 * d68) + (d29 * d75));
          d20 = ((d30 * d85) - (d28 * d20) + (d32 * d75));
          d68 = ((d36 * d92) - (d39 * d24) + (d38 * d8) - (d35 * d27));
          d24 = ((d34 * d24) - (d36 * d101) + (d38 * d22) - (d35 * d18));
          d18 = ((d34 * d27) - (d36 * d98) + (d39 * d18) - (d38 * d20));
          d8 = ((d34 * d8) - (d36 * d26) + (d39 * d22) - (d35 * d20));
          d26 = ((d34 * d92) - (d39 * d101) + (d38 * d26) - (d35 * d98));
          d22 = ((d34 * d23) - (d36 * d102) + (d37 * d22) - (d35 * d21));
          d20 = ((d34 * d53) - (d36 * d99) + (d37 * d20) - (d39 * d21));
          d13 = ((d36 * d17) - (d37 * d13) + (d39 * d134) - (d35 * d131));
          d21 = ((d30 * d43) - (d33 * d44) + (d29 * d5));
          d23 = ((d37 * d48) - (d39 * d49) + (d38 * d17) - (d35 * d51));
          d27 = ((d34 * d135) - (d37 * d124) + (d39 * d1) - (d38 * d123));
          d43 = ((d28 * d58) - (d32 * d63) + (d33 * d4));
          d44 = ((d37 * d60) - (d39 * d61) + (d38 * d62) - (d35 * d135));
          d5 = ((d30 * d46) - (d31 * d5) + (d33 * d3));
          d3 = ((d30 * d42) - (d31 * d41) + (d32 * d3));
          d30 = ((d36 * d49) - (d37 * d132) + (d38 * d134) - (d35 * d130));
          d33 = ((d34 * d51) - (d37 * d40) + (d39 * d5) - (d38 * d3));
          d17 = ((d34 * d17) - (d37 * d50) + (d39 * d10) - (d35 * d3));
          d41 = ((d34 * d48) - (d39 * d21) + (d38 * d50) - (d35 * d40));
          d42 = ((d34 * d49) - (d37 * d21) + (d38 * d10) - (d35 * d5));
          d10 = ((d34 * d134) - (d36 * d10) + (d37 * d129) - (d35 * d11));
          d21 = ((d34 * d132) - (d36 * d21) + (d38 * d129) - (d35 * d6));
          d5 = ((d34 * d130) - (d36 * d5) + (d37 * d6) - (d38 * d11));
          d6 = ((d34 * d9) - (d36 * d40) + (d39 * d6) - (d38 * d19));
          d3 = ((d34 * d131) - (d36 * d3) + (d37 * d19) - (d39 * d11));
          d9 = ((d34 * d60) - (d39 * d2) + (d38 * d122) - (d35 * d124));
          d11 = ((d28 * d57) - (d32 * d56) + (d29 * d4));
          d4 = ((d28 * d54) - (d31 * d4) + (d32 * d79));
          d19 = ((d34 * d11) - (d36 * d122) + (d39 * d126) - (d35 * d15));
          d28 = ((d36 * d135) - (d37 * d43) + (d39 * d14) - (d38 * d4));
          d29 = ((d36 * d61) - (d37 * d16) + (d38 * d52) - (d35 * d14));
          d31 = ((d36 * d60) - (d39 * d16) + (d38 * d11) - (d35 * d43));
          d11 = ((d36 * d62) - (d37 * d11) + (d39 * d52) - (d35 * d4));
          d2 = ((d34 * d16) - (d36 * d2) + (d38 * d126) - (d35 * d121));
          d16 = ((d34 * d43) - (d36 * d124) + (d39 * d121) - (d38 * d15));
          d1 = ((d34 * d14) - (d36 * d1) + (d37 * d121) - (d38 * d7));
          d4 = ((d34 * d4) - (d36 * d123) + (d37 * d15) - (d39 * d7));
          d7 = (1.0 / ((d76 * d128) - (d71 * d94) + (d77 * d89)
              - (d87 * d25) + (d110 * d83) - (d114 * d73)));
          result[0] = (d7 * d128);
          result[12] = (d7 * d89);
          result[24] = (d7 * d83);
          result[7] = (d7 * ((d76 * d84) - (d77 * d70) + (d87 * d80)
              - (d110 * d86) + (d114 * d88)));
          result[19] = (d7 * ((d76 * d116) - (d71 * d80) + (d77 * d109)
              - (d110 * d90) + (d114 * d117)));
          result[31] = (d7 * ((d76 * d72) - (d71 * d88) + (d77 * d59)
              - (d87 * d117) + (d110 * d113)));
          result[2] = (d7 * ((d71 * d115) - (d77 * d82) + (d87 * d74)
              - (d110 * d118) + (d114 * d119)));
          result[14] = (d7 * ((d76 * d82) - (d71 * d111) + (d87 * d120)
              - (d110 * d69) + (d114 * d65)));
          result[26] = (d7 * ((d76 * d118) - (d71 * d108) + (d77 * d69)
              - (d87 * d66) + (d114 * d78)));
          result[9] = (d7 * ((d76 * d104) - (d77 * d26) + (d87 * d105)
              - (d110 * d106) + (d114 * d107)));
          result[21] = (d7 * ((d76 * d12) - (d71 * d105) + (d77 * d24)
              - (d110 * d22) + (d114 * d64)));
          result[33] = (d7 * ((d76 * d81) - (d71 * d107) + (d77 * d18)
              - (d87 * d64) + (d110 * d20)));
          result[4] = (d7 * ((d71 * d44) - (d77 * d31) + (d87 * d29)
              - (d110 * d11) + (d114 * d28)));
          result[16] = (d7 * ((d76 * d31) - (d71 * d9) + (d87 * d2)
              - (d110 * d19) + (d114 * d16)));
          result[28] = (d7 * ((d76 * d11) - (d71 * d127) + (d77 * d19)
              - (d87 * d125) + (d114 * d4)));
          result[11] = (d7 * ((d76 * d23) - (d77 * d41) + (d87 * d42)
              - (d110 * d17) + (d114 * d33)));
          result[23] = (d7 * ((d76 * d30) - (d71 * d42) + (d77 * d21)
              - (d110 * d10) + (d114 * d5)));
          result[35] = (d7 * ((d76 * d133) - (d71 * d33) + (d77 * d6)
              - (d87 * d5) + (d110 * d3)));
          d5 = (-d7);
          result[6] = (d5 * d94);
          result[18] = (d5 * d25);
          result[30] = (d5 * d73);
          result[1] = (d5 * ((d71 * d84) - (d77 * d91) + (d87 * d116)
              - (d110 * d45) + (d114 * d72)));
          result[13] = (d5 * ((d76 * d91) - (d71 * d70) + (d87 * d109)
              - (d110 * d112) + (d114 * d59)));
          result[25] = (d5 * ((d76 * d45) - (d71 * d86) + (d77 * d112)
              - (d87 * d90) + (d114 * d113)));
          result[8] = (d5 * ((d76 * d115) - (d77 * d111) + (d87 * d95)
              - (d110 * d108) + (d114 * d96)));
          result[20] = (d5 * ((d76 * d74) - (d71 * d95) + (d77 * d120)
              - (d110 * d66) + (d114 * d67)));
          result[32] = (d5 * ((d76 * d119) - (d71 * d96) + (d77 * d65)
              - (d87 * d67) + (d110 * d78)));
          result[3] = (d5 * ((d71 * d104) - (d77 * d68) + (d87 * d12)
              - (d110 * d93) + (d114 * d81)));
          result[15] = (d5 * ((d76 * d68) - (d71 * d26) + (d87 * d24)
              - (d110 * d8) + (d114 * d18)));
          result[27] = (d5 * ((d76 * d93) - (d71 * d106) + (d77 * d8)
              - (d87 * d22) + (d114 * d20)));
          result[10] = (d5 * ((d76 * d44) - (d77 * d9) + (d87 * d136)
              - (d110 * d127) + (d114 * d27)));
          result[22] = (d5 * ((d76 * d29) - (d71 * d136) + (d77 * d2)
              - (d110 * d125) + (d114 * d1)));
          result[34] = (d5 * ((d76 * d28) - (d71 * d27) + (d77 * d16)
              - (d87 * d1) + (d110 * d4)));
          result[5] = (d5 * ((d71 * d23) - (d77 * d47) + (d87 * d30)
              - (d110 * d13) + (d114 * d133)));
          result[17] = (d5 * ((d76 * d47) - (d71 * d41) + (d87 * d21)
              - (d110 * d55) + (d114 * d6)));
          result[29] = (d5 * ((d76 * d13) - (d71 * d17) + (d77 * d55)
              - (d87 * d10) + (d114 * d3)));

        }
      }

  /*
   * For l=7, the hard coded inversion seems to be slower than the
   * inversion via L-U-decomposition.
   */
  /*
   * //l = 7, that means we handle all 7x7 matrices here new
   * IDirectInverse() { public void invert (double[] mat, double[] result) { //
   * 288 variables double d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11,
   * d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25,
   * d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39,
   * d40, d41, d42, d43, d44, d45, d46, d47, d48, d49, d50, d51, d52, d53,
   * d54, d55, d56, d57, d58, d59, d60, d61, d62, d63, d64, d65, d66, d67,
   * d68, d69, d70, d71, d72, d73, d74, d75, d76, d77, d78, d79, d80, d81,
   * d82, d83, d84, d85, d86, d87, d88, d89, d90, d91, d92, d93, d94, d95,
   * d96, d97, d98, d99, d100, d101, d102, d103, d104, d105, d106, d107,
   * d108, d109, d110, d111, d112, d113, d114, d115, d116, d117, d118,
   * d119, d120, d121, d122, d123, d124, d125, d126, d127, d128, d129,
   * d130, d131, d132, d133, d134, d135, d136, d137, d138, d139, d140,
   * d141, d142, d143, d144, d145, d146, d147, d148, d149, d150, d151,
   * d152, d153, d154, d155, d156, d157, d158, d159, d160, d161, d162,
   * d163, d164, d165, d166, d167, d168, d169, d170, d171, d172, d173,
   * d174, d175, d176, d177, d178, d179, d180, d181, d182, d183, d184,
   * d185, d186, d187, d188, d189, d190, d191, d192, d193, d194, d195,
   * d196, d197, d198, d199, d200, d201, d202, d203, d204, d205, d206,
   * d207, d208, d209, d210, d211, d212, d213, d214, d215, d216, d217,
   * d218, d219, d220, d221, d222, d223, d224, d225, d226, d227, d228,
   * d229, d230, d231, d232, d233, d234, d235, d236, d237, d238, d239,
   * d240, d241, d242, d243, d244, d245, d246, d247, d248, d249, d250,
   * d251, d252, d253, d254, d255, d256, d257, d258, d259, d260, d261,
   * d262, d263, d264, d265, d266, d267, d268, d269, d270, d271, d272,
   * d273, d274, d275, d276, d277, d278, d279, d280, d281, d282, d283,
   * d284, d285, d286, d287, d288; d1 = mat[15]; d2 = mat[20]; d3 =
   * mat[19]; d4 = mat[14]; d5 = mat[17]; d6 = mat[18]; d7 = mat[27]; d8 =
   * mat[43]; d9 = mat[36]; d10 = mat[48]; d11 = mat[41]; d12 = mat[47];
   * d13 = mat[40]; d14 = mat[46]; d15 = mat[39]; d16 = mat[45]; d17 =
   * mat[38]; d18 = mat[35]; d19 = mat[44]; d20 = mat[37]; d21 = mat[42];
   * d22 = mat[29]; d23 = mat[34]; d24 = mat[33]; d25 = mat[32]; d26 =
   * mat[28]; d27 = mat[30]; d28 = mat[31]; d29 = ((d9*d16)-(d17*d8)); d30 =
   * ((d9*d10)-(d11*d8)); d31 = ((d9*d12)-(d13*d8)); d32 =
   * ((d9*d14)-(d15*d8)); d33 = ((d9*d19)-(d20*d8)); d34 =
   * ((d18*d8)-(d9*d21)); d35 = ((d13*d10)-(d11*d12)); d36 =
   * ((d15*d10)-(d11*d14)); d37 = ((d17*d10)-(d11*d16)); d38 =
   * ((d20*d10)-(d11*d19)); d39 = ((d18*d10)-(d11*d21)); d40 =
   * ((d15*d12)-(d13*d14)); d41 = ((d17*d12)-(d13*d16)); d42 =
   * ((d20*d12)-(d13*d19)); d43 = ((d18*d12)-(d13*d21)); d44 =
   * ((d17*d14)-(d15*d16)); d45 = ((d20*d14)-(d15*d19)); d46 =
   * ((d18*d14)-(d15*d21)); d47 = ((d20*d16)-(d17*d19)); d48 =
   * ((d18*d16)-(d17*d21)); d49 = ((d18*d19)-(d20*d21)); d50 = mat[22]; d51 =
   * mat[26]; d52 = mat[24]; d53 = mat[21]; d54 = mat[23]; d55 = mat[25];
   * d56 = ((d25*d35)-(d24*d36)+(d23*d40)); d57 = ((d27*d15)-(d25*d20));
   * d58 = ((d27*d13)-(d24*d20)); d59 = ((d27*d17)-(d28*d20)); d60 =
   * ((d22*d16)-(d28*d8)); d61 = ((d22*d10)-(d23*d8)); d62 =
   * ((d22*d14)-(d25*d8)); d63 = ((d28*d12)-(d24*d16)); d64 =
   * ((d27*d16)-(d28*d19)); d65 = ((d28*d14)-(d25*d16)); d66 =
   * ((d28*d13)-(d24*d17)); d67 = ((d22*d20)-(d27*d9)); d68 =
   * ((d22*d17)-(d28*d9)); d69 = ((d27*d11)-(d23*d20)); d70 =
   * ((d22*d11)-(d23*d9)); d71 = ((d28*d11)-(d23*d17)); d72 =
   * ((d22*d13)-(d24*d9)); d73 = ((d24*d11)-(d23*d13)); d74 =
   * ((d50*d73)-(d51*d70)+(d7*d72)); d75 = ((d52*d73)-(d51*d71)+(d7*d66));
   * d76 = ((d25*d11)-(d23*d15)); d77 = ((d25*d13)-(d24*d15)); d78 =
   * mat[13]; d79 = mat[8]; d80 = mat[9]; d81 = mat[10]; d82 = mat[11]; d83 =
   * mat[12]; d84 = ((d28*d10)-(d23*d16)); d16 = ((d26*d16)-(d28*d21)); d85 =
   * ((d27*d10)-(d23*d19)); d86 = ((d27*d14)-(d25*d19)); d87 =
   * ((d24*d10)-(d23*d12)); d88 = ((d26*d10)-(d23*d21)); d89 =
   * ((d27*d12)-(d24*d19)); d10 = ((d25*d10)-(d23*d14)); d90 =
   * ((d25*d12)-(d24*d14)); d91 = ((d52*d87)-(d51*d84)+(d7*d63)); d92 =
   * ((d26*d12)-(d24*d21)); d93 = mat[7]; d94 =
   * ((d53*d84)-(d52*d88)+(d7*d16)); d95 = mat[16]; d96 =
   * ((d26*d19)-(d27*d21)); d97 = ((d52*d10)-(d55*d84)+(d7*d65)); d98 =
   * ((d28*d35)-(d24*d37)+(d23*d41)); d99 =
   * ((d26*d36)-(d25*d39)+(d23*d46)); d100 =
   * ((d28*d36)-(d25*d37)+(d23*d44)); d101 =
   * ((d26*d38)-(d27*d39)+(d23*d49)); d102 =
   * ((d26*d45)-(d27*d46)+(d25*d49)); d103 =
   * ((d27*d36)-(d25*d38)+(d23*d45)); d104 =
   * ((d26*d35)-(d24*d39)+(d23*d43)); d105 =
   * ((d26*d42)-(d27*d43)+(d24*d49)); d106 =
   * ((d26*d40)-(d25*d43)+(d24*d46)); d107 =
   * ((d27*d35)-(d24*d38)+(d23*d42)); d108 =
   * ((d26*d41)-(d28*d43)+(d24*d48)); d109 =
   * ((d26*d37)-(d28*d39)+(d23*d48)); d110 =
   * ((d28*d40)-(d25*d41)+(d24*d44)); d111 =
   * ((d52*d56)-(d55*d98)+(d51*d100)-(d7*d110)); d112 =
   * ((d53*d107)-(d54*d104)+(d51*d101)-(d7*d105)); d113 =
   * ((d53*d56)-(d55*d104)+(d51*d99)-(d7*d106)); d114 =
   * ((d53*d103)-(d54*d99)+(d55*d101)-(d7*d102)); d115 =
   * ((d26*d33)-(d22*d49)+(d27*d34)); d116 =
   * ((d26*d44)-(d28*d46)+(d25*d48)); d117 =
   * ((d27*d40)-(d25*d42)+(d24*d45)); d118 =
   * ((d22*d36)-(d25*d30)+(d23*d32)); d119 =
   * ((d53*d117)-(d54*d106)+(d55*d105)-(d51*d102)); d120 =
   * ((d27*d44)-(d28*d45)+(d25*d47)); d121 =
   * ((d27*d41)-(d28*d42)+(d24*d47)); d122 =
   * ((d27*d37)-(d28*d38)+(d23*d47)); d123 =
   * ((d22*d35)-(d24*d30)+(d23*d31)); d124 =
   * ((d22*d40)-(d25*d31)+(d24*d32)); d125 =
   * ((d26*d47)-(d27*d48)+(d28*d49)); d126 =
   * ((d54*d100)-(d52*d103)+(d55*d122)-(d7*d120)); d127 =
   * ((d54*d56)-(d55*d107)+(d51*d103)-(d7*d117)); d128 =
   * ((d53*d100)-(d52*d99)+(d55*d109)-(d7*d116)); d129 =
   * ((d26*d30)-(d22*d39)+(d23*d34)); d130 =
   * ((d26*d31)-(d22*d43)+(d24*d34)); d131 =
   * ((d26*d32)-(d22*d46)+(d25*d34)); d132 =
   * ((d53*d98)-(d52*d104)+(d51*d109)-(d7*d108)); d133 =
   * ((d22*d38)-(d27*d30)+(d23*d33)); d134 =
   * ((d53*d110)-(d52*d106)+(d55*d108)-(d51*d116)); d135 =
   * ((d53*d120)-(d54*d116)+(d52*d102)-(d55*d125)); d136 =
   * ((d53*d124)-(d50*d106)+(d55*d130)-(d51*d131)); d137 =
   * ((d54*d110)-(d52*d117)+(d55*d121)-(d51*d120)); d138 =
   * ((d26*d29)-(d22*d48)+(d28*d34)); d139 =
   * ((d22*d44)-(d28*d32)+(d25*d29)); d140 =
   * ((d54*d98)-(d52*d107)+(d51*d122)-(d7*d121)); d141 =
   * ((d95*d111)-(d5*d127)+(d6*d140)-(d3*d126)+(d2*d137)); d142 =
   * ((d4*d127)-(d95*d113)+(d6*d112)-(d3*d114)+(d2*d119)); d143 =
   * ((d22*d37)-(d28*d30)+(d23*d29)); d144 =
   * ((d22*d45)-(d27*d32)+(d25*d33)); d145 =
   * ((d50*d103)-(d54*d118)+(d55*d133)-(d7*d144)); d146 =
   * ((d53*d133)-(d50*d101)+(d54*d129)-(d7*d115)); d147 =
   * ((d53*d122)-(d54*d109)+(d52*d101)-(d7*d125)); d148 =
   * ((d22*d41)-(d28*d31)+(d24*d29)); d149 =
   * ((d22*d47)-(d27*d29)+(d28*d33)); d150 =
   * ((d53*d121)-(d54*d108)+(d52*d105)-(d51*d125)); d151 =
   * ((d22*d42)-(d27*d31)+(d24*d33)); d152 =
   * ((d53*d139)-(d50*d116)+(d52*d131)-(d55*d138)); d153 =
   * ((d50*d120)-(d54*d139)+(d52*d144)-(d55*d149)); d154 =
   * ((d50*d98)-(d52*d123)+(d51*d143)-(d7*d148)); d155 =
   * ((d50*d117)-(d54*d124)+(d55*d151)-(d51*d144)); d156 =
   * ((d50*d122)-(d54*d143)+(d52*d133)-(d7*d149)); d157 =
   * ((d50*d110)-(d52*d124)+(d55*d148)-(d51*d139)); d158 =
   * ((d53*d144)-(d50*d102)+(d54*d131)-(d55*d115)); d159 =
   * ((d50*d121)-(d54*d148)+(d52*d151)-(d51*d149)); d160 =
   * ((d54*d36)-(d55*d38)+(d7*d45)); d161 =
   * ((d54*d40)-(d55*d42)+(d51*d45)); d162 =
   * ((d54*d44)-(d52*d45)+(d55*d47)); d163 =
   * ((d54*d41)-(d52*d42)+(d51*d47)); d164 =
   * ((d50*d45)-(d54*d32)+(d55*d33)); d165 =
   * ((d50*d47)-(d54*d29)+(d52*d33)); d166 =
   * ((d54*d35)-(d51*d38)+(d7*d42)); d167 = ((d50*d38)-(d54*d30)+(d7*d33));
   * d168 = ((d54*d37)-(d52*d38)+(d7*d47)); d169 =
   * ((d50*d42)-(d54*d31)+(d51*d33)); d170 =
   * ((d55*d35)-(d51*d36)+(d7*d40)); d171 = ((d50*d35)-(d51*d30)+(d7*d31));
   * d172 = ((d52*d35)-(d51*d37)+(d7*d41)); d173 =
   * ((d52*d36)-(d55*d37)+(d7*d44)); d174 =
   * ((d52*d40)-(d55*d41)+(d51*d44)); d175 =
   * ((d95*d170)-(d6*d166)+(d3*d160)-(d2*d161)); d176 =
   * ((d5*d170)-(d6*d172)+(d3*d173)-(d2*d174)); d177 =
   * ((d50*d40)-(d55*d31)+(d51*d32)); d178 =
   * ((d95*d172)-(d5*d166)+(d3*d168)-(d2*d163)); d179 =
   * ((d95*d173)-(d5*d160)+(d6*d168)-(d2*d162)); d180 =
   * ((d95*d174)-(d5*d161)+(d6*d163)-(d3*d162)); d19 =
   * ((d22*d19)-(d27*d8)); d181 = ((d50*d85)-(d54*d61)+(d7*d19)); d12 =
   * ((d22*d12)-(d24*d8)); d182 = ((d50*d10)-(d55*d61)+(d7*d62)); d183 =
   * ((d50*d86)-(d54*d62)+(d55*d19)); d184 =
   * ((d50*d64)-(d54*d60)+(d52*d19)); d185 =
   * ((d50*d90)-(d55*d12)+(d51*d62)); d186 =
   * ((d50*d84)-(d52*d61)+(d7*d60)); d187 = ((d54*d10)-(d55*d85)+(d7*d86));
   * d188 = ((d50*d65)-(d52*d62)+(d55*d60)); d189 =
   * ((d50*d87)-(d51*d61)+(d7*d12)); d190 =
   * ((d54*d65)-(d52*d86)+(d55*d64)); d191 =
   * ((d50*d89)-(d54*d12)+(d51*d19)); d13 = ((d26*d13)-(d24*d18)); d11 =
   * ((d26*d11)-(d23*d18)); d23 = ((d53*d73)-(d51*d11)+(d7*d13)); d24 =
   * ((d26*d15)-(d25*d18)); d192 = ((d26*d17)-(d28*d18)); d20 =
   * ((d26*d20)-(d27*d18)); d27 = ((d53*d71)-(d52*d11)+(d7*d192)); d193 =
   * ((d53*d69)-(d54*d11)+(d7*d20)); d194 = ((d53*d76)-(d55*d11)+(d7*d24));
   * d195 = ((d53*d58)-(d54*d13)+(d51*d20)); d18 = ((d26*d9)-(d22*d18));
   * d196 = ((d53*d59)-(d54*d192)+(d52*d20)); d197 =
   * ((d53*d77)-(d55*d13)+(d51*d24)); d198 =
   * ((d53*d57)-(d54*d24)+(d55*d20)); d17 = ((d28*d15)-(d25*d17)); d20 =
   * ((d53*d67)-(d50*d20)+(d54*d18)); d28 =
   * ((d54*d77)-(d55*d58)+(d51*d57)); d199 =
   * ((d55*d73)-(d51*d76)+(d7*d77)); d73 = ((d54*d73)-(d51*d69)+(d7*d58));
   * d200 = ((d54*d17)-(d52*d57)+(d55*d59)); d201 =
   * ((d52*d76)-(d55*d71)+(d7*d17)); d202 = ((d54*d71)-(d52*d69)+(d7*d59));
   * d203 = ((d50*d63)-(d52*d12)+(d51*d60)); d8 = ((d26*d8)-(d22*d21)); d60 =
   * ((d53*d60)-(d50*d16)+(d52*d8)); d204 =
   * ((d1*d91)-(d5*d189)+(d3*d186)-(d2*d203)); d61 =
   * ((d53*d61)-(d50*d88)+(d7*d8)); d205 =
   * ((d4*d186)-(d1*d94)+(d5*d61)-(d2*d60)); d206 =
   * ((d52*d90)-(d55*d63)+(d51*d65)); d12 = ((d53*d12)-(d50*d92)+(d51*d8));
   * d14 = ((d26*d14)-(d25*d21)); d21 = ((d53*d63)-(d52*d92)+(d51*d16));
   * d26 = ((d53*d90)-(d55*d92)+(d51*d14)); d207 =
   * ((d54*d87)-(d51*d85)+(d7*d89)); d19 = ((d53*d19)-(d50*d96)+(d54*d8));
   * d208 = ((d53*d87)-(d51*d88)+(d7*d92)); d63 =
   * ((d54*d63)-(d52*d89)+(d51*d64)); d209 =
   * ((d4*d189)-(d1*d208)+(d3*d61)-(d2*d12)); d84 =
   * ((d54*d84)-(d52*d85)+(d7*d64)); d64 = ((d53*d64)-(d54*d16)+(d52*d96));
   * d210 = ((d54*d90)-(d55*d89)+(d51*d86)); d8 =
   * ((d53*d62)-(d50*d14)+(d55*d8)); d62 =
   * ((d1*d210)-(d95*d185)+(d6*d191)-(d3*d183)); d86 =
   * ((d53*d86)-(d54*d14)+(d55*d96)); d211 =
   * ((d54*d76)-(d55*d69)+(d7*d57)); d212 =
   * ((d53*d72)-(d50*d13)+(d51*d18)); d213 =
   * ((d50*d58)-(d54*d72)+(d51*d67)); d9 = ((d22*d15)-(d25*d9)); d15 =
   * ((d95*d199)-(d6*d73)+(d3*d211)-(d2*d28)); d22 =
   * ((d53*d9)-(d50*d24)+(d55*d18)); d25 = ((d50*d69)-(d54*d70)+(d7*d67));
   * d69 = ((d50*d77)-(d55*d72)+(d51*d9)); d76 =
   * ((d50*d76)-(d55*d70)+(d7*d9)); d214 =
   * ((d95*d201)-(d5*d211)+(d6*d202)-(d2*d200)); d215 =
   * ((d50*d17)-(d52*d9)+(d55*d68)); d216 =
   * ((d50*d59)-(d54*d68)+(d52*d67)); d217 =
   * ((d53*d68)-(d50*d192)+(d52*d18)); d87 =
   * ((d55*d87)-(d51*d10)+(d7*d90)); d58 = ((d54*d66)-(d52*d58)+(d51*d59));
   * d59 = ((d52*d77)-(d55*d66)+(d51*d17)); d77 =
   * ((d1*d73)-(d95*d74)+(d3*d25)-(d2*d213)); d72 =
   * ((d50*d66)-(d52*d72)+(d51*d68)); d9 = ((d50*d57)-(d54*d9)+(d55*d67));
   * d57 = ((d95*d59)-(d5*d28)+(d6*d58)-(d3*d200)); d67 =
   * ((d1*d121)-(d95*d148)+(d5*d151)-(d3*d149)); d90 =
   * ((d1*d98)-(d5*d123)+(d3*d143)-(d2*d148)); d218 =
   * ((d1*d110)-(d5*d124)+(d6*d148)-(d3*d139)); d219 =
   * ((d5*d56)-(d6*d98)+(d3*d100)-(d2*d110)); d220 =
   * ((d95*d98)-(d5*d107)+(d3*d122)-(d2*d121)); d221 =
   * ((d95*d110)-(d5*d117)+(d6*d121)-(d3*d120)); d222 =
   * ((d53*d118)-(d50*d99)+(d55*d129)-(d7*d131)); d223 =
   * ((d93*d127)-(d80*d113)+(d82*d112)-(d83*d114)+(d78* d119)); d224 =
   * ((d93*d126)-(d80*d128)+(d81*d114)-(d82*d147)+(d78* d135)); d225 =
   * ((d95*d100)-(d5*d103)+(d6*d122)-(d2*d120)); d226 =
   * ((d4*d100)-(d5*d99)+(d6*d109)-(d2*d116)); d227 =
   * ((d4*d122)-(d95*d109)+(d5*d101)-(d2*d125)); d228 =
   * ((d4*d120)-(d95*d116)+(d5*d102)-(d6*d125)); d229 =
   * ((d95*d56)-(d6*d107)+(d3*d103)-(d2*d117)); d230 =
   * ((d4*d56)-(d6*d104)+(d3*d99)-(d2*d106)); d231 =
   * ((d4*d107)-(d95*d104)+(d3*d101)-(d2*d105)); d232 =
   * ((d4*d103)-(d95*d99)+(d6*d101)-(d2*d102)); d233 =
   * ((d4*d117)-(d95*d106)+(d6*d105)-(d3*d102)); d234 =
   * ((d80*d219)-(d81*d229)+(d82*d220)-(d83*d225)+(d78* d221)); d110 =
   * ((d4*d110)-(d5*d106)+(d6*d108)-(d3*d116)); d235 =
   * ((d93*d229)-(d80*d230)+(d82*d231)-(d83*d232)+(d78* d233)); d98 =
   * ((d4*d98)-(d5*d104)+(d3*d109)-(d2*d108)); d236 =
   * ((d93*d225)-(d80*d226)+(d81*d232)-(d82*d227)+(d78* d228)); d121 =
   * ((d4*d121)-(d95*d108)+(d5*d105)-(d3*d125)); d237 =
   * ((d4*d137)-(d95*d134)+(d5*d119)-(d6*d150)+(d3*d135)); d238 =
   * ((d53*d123)-(d50*d104)+(d51*d129)-(d7*d130)); d239 =
   * ((d50*d100)-(d52*d118)+(d55*d143)-(d7*d139)); d240 =
   * ((d93*d140)-(d80*d132)+(d81*d112)-(d83*d147)+(d78* d150)); d241 =
   * ((d50*d107)-(d54*d123)+(d51*d133)-(d7*d151)); d242 =
   * ((d1*d126)-(d95*d239)+(d5*d145)-(d6*d156)+(d2*d153)); d243 =
   * ((d53*d148)-(d50*d108)+(d52*d130)-(d51*d138)); d244 =
   * ((d93*d111)-(d81*d113)+(d82*d132)-(d83*d128)+(d78* d134)); d245 =
   * ((d4*d145)-(d1*d114)+(d95*d222)-(d6*d146)+(d2*d158)); d246 =
   * ((d50*d56)-(d55*d123)+(d51*d118)-(d7*d124)); d247 =
   * ((d53*d143)-(d50*d109)+(d52*d129)-(d7*d138)); d248 =
   * ((d93*d157)-(d79*d134)+(d81*d136)-(d82*d243)+(d83* d152)); d249 =
   * ((d80*d111)-(d81*d127)+(d82*d140)-(d83*d126)+(d78* d137)); d250 =
   * ((d4*d246)-(d1*d113)+(d6*d238)-(d3*d222)+(d2*d136)); d251 =
   * ((d53*d151)-(d50*d105)+(d54*d130)-(d51*d115)); d252 =
   * ((d79*d140)-(d80*d154)+(d81*d241)-(d83*d156)+(d78* d159)); d253 =
   * ((d79*d126)-(d80*d239)+(d81*d145)-(d82*d156)+(d78* d153)); d254 =
   * ((d79*d137)-(d80*d157)+(d81*d155)-(d82*d159)+(d83* d153)); d255 =
   * ((d53*d41)-(d52*d43)+(d51*d48)); d256 =
   * ((d53*d37)-(d52*d39)+(d7*d48)); d35 = ((d53*d35)-(d51*d39)+(d7*d43));
   * d40 = ((d53*d40)-(d55*d43)+(d51*d46)); d257 =
   * ((d4*d172)-(d5*d35)+(d3*d256)-(d2*d255)); d47 =
   * ((d53*d47)-(d54*d48)+(d52*d49)); d258 =
   * ((d53*d44)-(d52*d46)+(d55*d48)); d38 = ((d53*d38)-(d54*d39)+(d7*d49));
   * d259 = ((d53*d36)-(d55*d39)+(d7*d46)); d42 =
   * ((d53*d42)-(d54*d43)+(d51*d49)); d43 =
   * ((d53*d31)-(d50*d43)+(d51*d34)); d260 =
   * ((d4*d163)-(d95*d255)+(d5*d42)-(d3*d47)); d261 =
   * ((d4*d174)-(d5*d40)+(d6*d255)-(d3*d258)); d45 =
   * ((d53*d45)-(d54*d46)+(d55*d49)); d44 =
   * ((d50*d44)-(d52*d32)+(d55*d29)); d33 =
   * ((d53*d33)-(d50*d49)+(d54*d34)); d49 =
   * ((d4*d161)-(d95*d40)+(d6*d42)-(d3*d45)); d262 =
   * ((d4*d170)-(d6*d35)+(d3*d259)-(d2*d40)); d263 =
   * ((d4*d166)-(d95*d35)+(d3*d38)-(d2*d42)); d264 =
   * ((d4*d162)-(d95*d258)+(d5*d45)-(d6*d47)); d265 =
   * ((d4*d173)-(d5*d259)+(d6*d256)-(d2*d258)); d266 =
   * ((d4*d168)-(d95*d256)+(d5*d38)-(d2*d47)); d267 =
   * ((d4*d160)-(d95*d259)+(d6*d38)-(d2*d45)); d46 =
   * ((d53*d32)-(d50*d46)+(d55*d34)); d42 =
   * ((d4*d169)-(d1*d42)+(d95*d43)-(d3*d33)); d45 =
   * ((d4*d164)-(d1*d45)+(d95*d46)-(d6*d33)); d268 =
   * ((d93*d175)-(d80*d262)+(d82*d263)-(d83*d267)+(d78* d49)); d32 =
   * ((d50*d36)-(d55*d30)+(d7*d32)); d36 = ((d53*d30)-(d50*d39)+(d7*d34));
   * d39 = ((d4*d177)-(d1*d40)+(d6*d43)-(d3*d46)); d40 =
   * ((d1*d160)-(d95*d32)+(d6*d167)-(d2*d164)); d160 =
   * ((d93*d179)-(d80*d265)+(d81*d267)-(d82*d266)+(d78* d264)); d30 =
   * ((d50*d37)-(d52*d30)+(d7*d29)); d37 =
   * ((d1*d168)-(d95*d30)+(d5*d167)-(d2*d165)); d34 =
   * ((d53*d29)-(d50*d48)+(d52*d34)); d48 =
   * ((d1*d63)-(d95*d203)+(d5*d191)-(d3*d184)); d168 =
   * ((d1*d87)-(d6*d189)+(d3*d182)-(d2*d185)); d269 =
   * ((d5*d87)-(d6*d91)+(d3*d97)-(d2*d206)); d13 =
   * ((d53*d66)-(d52*d13)+(d51*d192)); d17 =
   * ((d53*d17)-(d52*d24)+(d55*d192)); d24 =
   * ((d4*d211)-(d95*d194)+(d6*d193)-(d2*d198)); d66 =
   * ((d4*d75)-(d5*d23)+(d3*d27)-(d2*d13)); d192 =
   * ((d4*d73)-(d95*d23)+(d3*d193)-(d2*d195)); d270 =
   * ((d4*d58)-(d95*d13)+(d5*d195)-(d3*d196)); d271 =
   * ((d5*d199)-(d6*d75)+(d3*d201)-(d2*d59)); d272 =
   * ((d1*d200)-(d95*d215)+(d5*d9)-(d6*d216)); d273 =
   * ((d4*d28)-(d95*d197)+(d6*d195)-(d3*d198)); d200 =
   * ((d4*d200)-(d95*d17)+(d5*d198)-(d6*d196)); d198 =
   * ((d4*d9)-(d1*d198)+(d95*d22)-(d6*d20)); d274 =
   * ((d4*d199)-(d6*d23)+(d3*d194)-(d2*d197)); d275 =
   * ((d4*d201)-(d5*d194)+(d6*d27)-(d2*d17)); d276 =
   * ((d4*d202)-(d95*d27)+(d5*d193)-(d2*d196)); d11 =
   * ((d53*d70)-(d50*d11)+(d7*d18)); d18 =
   * ((d1*d59)-(d5*d69)+(d6*d72)-(d3*d215)); d73 =
   * ((d95*d75)-(d5*d73)+(d3*d202)-(d2*d58)); d195 =
   * ((d4*d213)-(d1*d195)+(d95*d212)-(d3*d20)); d59 =
   * ((d4*d59)-(d5*d197)+(d6*d13)-(d3*d17)); d194 =
   * ((d4*d76)-(d1*d194)+(d6*d11)-(d2*d22)); d68 =
   * ((d50*d71)-(d52*d70)+(d7*d68)); d70 =
   * ((d1*d84)-(d95*d186)+(d5*d181)-(d2*d184)); d71 =
   * ((d95*d97)-(d5*d187)+(d6*d84)-(d2*d190)); d186 =
   * ((d1*d97)-(d5*d182)+(d6*d186)-(d2*d188)); d277 =
   * ((d1*d187)-(d95*d182)+(d6*d181)-(d2*d183)); d278 =
   * ((d4*d91)-(d5*d208)+(d3*d94)-(d2*d21)); d279 =
   * ((d1*d206)-(d5*d185)+(d6*d203)-(d3*d188)); d91 =
   * ((d95*d91)-(d5*d207)+(d3*d84)-(d2*d63)); d203 =
   * ((d4*d203)-(d1*d21)+(d5*d12)-(d3*d60)); d280 =
   * ((d95*d87)-(d6*d207)+(d3*d187)-(d2*d210)); d10 =
   * ((d53*d10)-(d55*d88)+(d7*d14)); d7 = ((d53*d85)-(d54*d88)+(d7*d96));
   * d85 = ((d53*d89)-(d54*d92)+(d51*d96)); d88 =
   * ((d95*d206)-(d5*d210)+(d6*d63)-(d3*d190)); d89 =
   * ((d1*d207)-(d95*d189)+(d3*d181)-(d2*d191)); d92 =
   * ((d93*d204)-(d79*d278)+(d81*d209)-(d83*d205)+(d78*d203)); d96 =
   * ((d1*d190)-(d95*d188)+(d5*d183)-(d6*d184)); d14 =
   * ((d53*d65)-(d52*d14)+(d55*d16)); d16 =
   * ((d4*d184)-(d1*d64)+(d95*d60)-(d5*d19)); d55 =
   * ((d4*d241)-(d1*d112)+(d95*d238)-(d3*d146)+(d2*d251)); d65 =
   * ((d1*d127)-(d95*d246)+(d6*d241)-(d3*d145)+(d2*d155)); d184 =
   * ((d1*d140)-(d95*d154)+(d5*d241)-(d3*d156)+(d2*d159)); d189 =
   * ((d1*d111)-(d5*d246)+(d6*d154)-(d3*d239)+(d2*d157)); d126 =
   * ((d4*d126)-(d95*d128)+(d5*d114)-(d6*d147)+(d2*d135)); d53 =
   * ((d53*d149)-(d50*d125)+(d54*d138)-(d52*d115)); d54 =
   * ((d93*d145)-(d79*d114)+(d80*d222)-(d82*d146)+(d78*d158)); d114 =
   * ((d4*d239)-(d1*d128)+(d5*d222)-(d6*d247)+(d2*d152)); d281 =
   * ((d93*d241)-(d79*d112)+(d80*d238)-(d83*d146)+(d78* d251)); d282 =
   * ((d4*d156)-(d1*d147)+(d95*d247)-(d5*d146)+(d2*d53)); d283 =
   * ((d93*d246)-(d79*d113)+(d82*d238)-(d83*d222)+(d78* d136)); d113 =
   * ((d4*d111)-(d5*d113)+(d6*d132)-(d3*d128)+(d2*d134)); d284 =
   * ((d1*d137)-(d95*d157)+(d5*d155)-(d6*d159)+(d3*d153)); d285 =
   * ((d4*d157)-(d1*d134)+(d5*d136)-(d6*d243)+(d3*d152)); d286 =
   * ((d4*d155)-(d1*d119)+(d95*d136)-(d6*d251)+(d3*d158)); d287 =
   * ((d79*d141)-(d80*d189)+(d81*d65)-(d82*d184)+(d83*d242)- (d78*d284));
   * d288 = ((d4*d154)-(d1*d132)+(d5*d238)-(d3*d247)+(d2*d243)); d127 =
   * ((d79*d127)-(d80*d246)+(d82*d241)-(d83*d145)+(d78* d155)); d145 =
   * ((d93*d156)-(d79*d147)+(d80*d247)-(d81*d146)+(d78* d53)); d146 =
   * ((d93*d189)-(d79*d113)+(d81*d250)-(d82*d288)+(d83* d114)-(d78*d285));
   * d111 = ((d79*d111)-(d81*d246)+(d82*d154)-(d83*d239)+(d78* d157)); d128 =
   * ((d93*d239)-(d79*d128)+(d81*d222)-(d82*d247)+(d78* d152)); d156 =
   * ((d4*d159)-(d1*d150)+(d95*d243)-(d5*d251)+(d3*d53)); d112 =
   * ((d4*d140)-(d95*d132)+(d5*d112)-(d3*d147)+(d2*d150)); d136 =
   * ((d93*d155)-(d79*d119)+(d80*d136)-(d82*d251)+(d83* d158)); d140 =
   * ((d93*d153)-(d79*d135)+(d80*d152)-(d81*d158)+(d82* d53)); d147 =
   * ((d93*d184)-(d79*d112)+(d80*d288)-(d81*d55)+(d83*d282)- (d78*d156));
   * d155 = ((d93*d141)-(d80*d113)+(d81*d142)-(d82*d112)+(d83*
   * d126)-(d78*d237)); d132 =
   * ((d93*d154)-(d79*d132)+(d81*d238)-(d83*d247)+(d78* d243)); d152 =
   * ((d4*d153)-(d1*d135)+(d95*d152)-(d5*d158)+(d6*d53)); d153 =
   * ((d93*d284)-(d79*d237)+(d80*d285)-(d81*d286)+(d82* d156)-(d83*d152));
   * d119 = ((d93*d137)-(d80*d134)+(d81*d119)-(d82*d150)+(d83* d135)); d53 =
   * ((d93*d159)-(d79*d150)+(d80*d243)-(d81*d251)+(d83*d53)); d134 =
   * ((d93*d65)-(d79*d142)+(d80*d250)-(d82*d55)+(d83*d245)- (d78*d286));
   * d135 = ((d93*d242)-(d79*d126)+(d80*d114)-(d81*d245)+(d82*
   * d282)-(d78*d152)); d137 = mat[1]; d150 = mat[0]; d154 = mat[2]; d157 =
   * mat[3]; d158 = mat[4]; d159 = mat[5]; d222 = mat[6]; d102 =
   * ((d4*d144)-(d1*d102)+(d95*d131)-(d6*d115)); d101 =
   * ((d4*d133)-(d1*d101)+(d95*d129)-(d2*d115)); d107 =
   * ((d1*d107)-(d95*d123)+(d3*d133)-(d2*d151)); d99 =
   * ((d4*d118)-(d1*d99)+(d6*d129)-(d2*d131)); d103 =
   * ((d1*d103)-(d95*d118)+(d6*d133)-(d2*d144)); d120 =
   * ((d1*d120)-(d95*d139)+(d5*d144)-(d6*d149)); d117 =
   * ((d1*d117)-(d95*d124)+(d6*d151)-(d3*d144)); d122 =
   * ((d1*d122)-(d95*d143)+(d5*d133)-(d2*d149)); d133 =
   * ((d93*d103)-(d79*d232)+(d80*d99)-(d82*d101)+(d78*d102)); d100 =
   * ((d1*d100)-(d5*d118)+(d6*d143)-(d2*d139)); d56 =
   * ((d1*d56)-(d6*d123)+(d3*d118)-(d2*d124)); d118 =
   * ((d79*d225)-(d80*d100)+(d81*d103)-(d82*d122)+(d78* d120)); d103 =
   * ((d79*d229)-(d80*d56)+(d82*d107)-(d83*d103)+(d78*d117)); d144 =
   * ((d79*d221)-(d80*d218)+(d81*d117)-(d82*d67)+(d83*d120)); d106 =
   * ((d4*d124)-(d1*d106)+(d6*d130)-(d3*d131)); d116 =
   * ((d4*d139)-(d1*d116)+(d5*d131)-(d6*d138)); d124 =
   * ((d79*d220)-(d80*d90)+(d81*d107)-(d83*d122)+(d78*d67)); d104 =
   * ((d4*d123)-(d1*d104)+(d3*d129)-(d2*d130)); d109 =
   * ((d4*d143)-(d1*d109)+(d5*d129)-(d2*d138)); d123 =
   * ((d79*d219)-(d81*d56)+(d82*d90)-(d83*d100)+(d78*d218)); d56 =
   * ((d93*d56)-(d79*d230)+(d82*d104)-(d83*d99)+(d78*d106)); d99 =
   * ((d93*d100)-(d79*d226)+(d81*d99)-(d82*d109)+(d78*d116)); d100 =
   * ((d4*d148)-(d1*d108)+(d5*d130)-(d3*d138)); d108 =
   * ((d93*d219)-(d81*d230)+(d82*d98)-(d83*d226)+(d78*d110)); d105 =
   * ((d4*d151)-(d1*d105)+(d95*d130)-(d3*d115)); d115 =
   * ((d4*d149)-(d1*d125)+(d95*d138)-(d5*d115)); d90 =
   * ((d93*d90)-(d79*d98)+(d81*d104)-(d83*d109)+(d78*d100)); d98 =
   * ((d93*d220)-(d80*d98)+(d81*d231)-(d83*d227)+(d78*d121)); d104 =
   * ((d93*d107)-(d79*d231)+(d80*d104)-(d83*d101)+(d78* d105)); d101 =
   * ((d93*d122)-(d79*d227)+(d80*d109)-(d81*d101)+(d78* d115)); d67 =
   * ((d93*d67)-(d79*d121)+(d80*d100)-(d81*d105)+(d83*d115)); d107 =
   * ((d93*d221)-(d80*d110)+(d81*d233)-(d82*d121)+(d83* d228)); d100 =
   * ((d93*d218)-(d79*d110)+(d81*d106)-(d82*d100)+(d83* d116)); d105 =
   * ((d93*d117)-(d79*d233)+(d80*d106)-(d82*d105)+(d83* d102)); d102 =
   * ((d93*d120)-(d79*d228)+(d80*d116)-(d81*d102)+(d82* d115)); d106 =
   * ((d93*d180)-(d80*d261)+(d81*d49)-(d82*d260)+(d83*d264)); d109 =
   * ((d93*d178)-(d80*d257)+(d81*d263)-(d83*d266)+(d78* d260)); d110 =
   * ((d93*d176)-(d81*d262)+(d82*d257)-(d83*d265)+(d78* d261)); d115 =
   * ((d4*d32)-(d1*d259)+(d6*d36)-(d2*d46)); d35 =
   * ((d4*d171)-(d1*d35)+(d3*d36)-(d2*d43)); d116 =
   * ((d1*d161)-(d95*d177)+(d6*d169)-(d3*d164)); d117 =
   * ((d80*d176)-(d81*d175)+(d82*d178)-(d83*d179)+(d78* d180)); d47 =
   * ((d4*d165)-(d1*d47)+(d95*d34)-(d5*d33)); d33 =
   * ((d4*d167)-(d1*d38)+(d95*d36)-(d2*d33)); d29 =
   * ((d50*d41)-(d52*d31)+(d51*d29)); d31 =
   * ((d1*d170)-(d6*d171)+(d3*d32)-(d2*d177)); d38 =
   * ((d1*d162)-(d95*d44)+(d5*d164)-(d6*d165)); d41 =
   * ((d1*d166)-(d95*d171)+(d3*d167)-(d2*d169)); d50 =
   * ((d1*d172)-(d5*d171)+(d3*d30)-(d2*d29)); d51 =
   * ((d1*d163)-(d95*d29)+(d5*d169)-(d3*d165)); d32 =
   * ((d1*d173)-(d5*d32)+(d6*d30)-(d2*d44)); d52 =
   * ((d93*d41)-(d79*d263)+(d80*d35)-(d83*d33)+(d78*d42)); d30 =
   * ((d4*d30)-(d1*d256)+(d5*d36)-(d2*d34)); d36 =
   * ((d79*d175)-(d80*d31)+(d82*d41)-(d83*d40)+(d78*d116)); d120 =
   * ((d1*d174)-(d5*d177)+(d6*d29)-(d3*d44)); d29 =
   * ((d4*d29)-(d1*d255)+(d5*d43)-(d3*d34)); d34 =
   * ((d4*d44)-(d1*d258)+(d5*d46)-(d6*d34)); d43 =
   * ((d79*d180)-(d80*d120)+(d81*d116)-(d82*d51)+(d83*d38)); d41 =
   * ((d79*d178)-(d80*d50)+(d81*d41)-(d83*d37)+(d78*d51)); d44 =
   * ((d79*d179)-(d80*d32)+(d81*d40)-(d82*d37)+(d78*d38)); d46 =
   * ((d79*d176)-(d81*d31)+(d82*d50)-(d83*d32)+(d78*d120)); d50 =
   * ((d93*d50)-(d79*d257)+(d81*d35)-(d83*d30)+(d78*d29)); d31 =
   * ((d93*d31)-(d79*d262)+(d82*d35)-(d83*d115)+(d78*d39)); d32 =
   * ((d93*d32)-(d79*d265)+(d81*d115)-(d82*d30)+(d78*d34)); d35 =
   * ((d93*d40)-(d79*d267)+(d80*d115)-(d82*d33)+(d78*d45)); d30 =
   * ((d93*d37)-(d79*d266)+(d80*d30)-(d81*d33)+(d78*d47)); d33 =
   * ((d93*d120)-(d79*d261)+(d81*d39)-(d82*d29)+(d83*d34)); d37 =
   * ((d93*d116)-(d79*d49)+(d80*d39)-(d82*d42)+(d83*d45)); d29 =
   * ((d93*d51)-(d79*d260)+(d80*d29)-(d81*d42)+(d83*d47)); d34 =
   * ((d93*d38)-(d79*d264)+(d80*d34)-(d81*d45)+(d82*d47)); d38 =
   * ((d93*d57)-(d80*d59)+(d81*d273)-(d82*d270)+(d83*d200)); d39 =
   * ((d93*d73)-(d80*d66)+(d81*d192)-(d83*d276)+(d78*d270)); d40 =
   * ((d93*d271)-(d81*d274)+(d82*d66)-(d83*d275)+(d78*d59)); d42 =
   * ((d1*d211)-(d95*d76)+(d6*d25)-(d2*d9)); d45 =
   * ((d4*d188)-(d1*d14)+(d5*d8)-(d6*d60)); d47 =
   * ((d4*d206)-(d5*d26)+(d6*d21)-(d3*d14)); d49 =
   * ((d4*d97)-(d5*d10)+(d6*d94)-(d2*d14)); d51 =
   * ((d79*d88)-(d80*d279)+(d81*d62)-(d82*d48)+(d83*d96)); d60 =
   * ((d79*d91)-(d80*d204)+(d81*d89)-(d83*d70)+(d78*d48)); d97 =
   * ((d79*d280)-(d80*d168)+(d82*d89)-(d83*d277)+(d78*d62)); d115 =
   * ((d80*d269)-(d81*d280)+(d82*d91)-(d83*d71)+(d78*d88)); d116 =
   * ((d79*d269)-(d81*d168)+(d82*d204)-(d83*d186)+(d78* d279)); d120 =
   * ((d79*d71)-(d80*d186)+(d81*d277)-(d82*d70)+(d78*d96)); d121 =
   * ((d4*d210)-(d95*d26)+(d6*d85)-(d3*d86)); d122 =
   * ((d4*d207)-(d95*d208)+(d3*d7)-(d2*d85)); d21 =
   * ((d4*d63)-(d95*d21)+(d5*d85)-(d3*d64)); d63 =
   * ((d4*d84)-(d95*d94)+(d5*d7)-(d2*d64)); d23 =
   * ((d4*d74)-(d1*d23)+(d3*d11)-(d2*d212)); d9 =
   * ((d1*d28)-(d95*d69)+(d6*d213)-(d3*d9)); d28 =
   * ((d93*d15)-(d80*d274)+(d82*d192)-(d83*d24)+(d78*d273)); d84 =
   * ((d4*d216)-(d1*d196)+(d95*d217)-(d5*d20)); d20 =
   * ((d4*d25)-(d1*d193)+(d95*d11)-(d2*d20)); d94 =
   * ((d1*d201)-(d5*d76)+(d6*d68)-(d2*d215)); d76 =
   * ((d1*d199)-(d6*d74)+(d3*d76)-(d2*d69)); d125 =
   * ((d93*d214)-(d80*d275)+(d81*d24)-(d82*d276)+(d78*d200)); d69 =
   * ((d4*d69)-(d1*d197)+(d6*d212)-(d3*d22)); d74 =
   * ((d1*d75)-(d5*d74)+(d3*d68)-(d2*d72)); d75 =
   * ((d80*d271)-(d81*d15)+(d82*d73)-(d83*d214)+(d78*d57)); d25 =
   * ((d1*d202)-(d95*d68)+(d5*d25)-(d2*d216)); d129 =
   * ((d93*d77)-(d79*d192)+(d80*d23)-(d83*d20)+(d78*d195)); d11 =
   * ((d4*d68)-(d1*d27)+(d5*d11)-(d2*d217)); d15 =
   * ((d79*d15)-(d80*d76)+(d82*d77)-(d83*d42)+(d78*d9)); d27 =
   * ((d1*d58)-(d95*d72)+(d5*d213)-(d3*d216)); d13 =
   * ((d4*d72)-(d1*d13)+(d5*d212)-(d3*d217)); d17 =
   * ((d4*d215)-(d1*d17)+(d5*d22)-(d6*d217)); d22 =
   * ((d79*d57)-(d80*d18)+(d81*d9)-(d82*d27)+(d83*d272)); d57 =
   * ((d79*d73)-(d80*d74)+(d81*d77)-(d83*d25)+(d78*d27)); d58 =
   * ((d79*d214)-(d80*d94)+(d81*d42)-(d82*d25)+(d78*d272)); d68 =
   * ((d79*d271)-(d81*d76)+(d82*d74)-(d83*d94)+(d78*d18)); d66 =
   * ((d93*d74)-(d79*d66)+(d81*d23)-(d83*d11)+(d78*d13)); d23 =
   * ((d93*d76)-(d79*d274)+(d82*d23)-(d83*d194)+(d78*d69)); d72 =
   * ((d93*d94)-(d79*d275)+(d81*d194)-(d82*d11)+(d78*d17)); d24 =
   * ((d93*d42)-(d79*d24)+(d80*d194)-(d82*d20)+(d78*d198)); d11 =
   * ((d93*d25)-(d79*d276)+(d80*d11)-(d81*d20)+(d78*d84)); d18 =
   * ((d93*d18)-(d79*d59)+(d81*d69)-(d82*d13)+(d83*d17)); d9 =
   * ((d93*d9)-(d79*d273)+(d80*d69)-(d82*d195)+(d83*d198)); d13 =
   * ((d93*d27)-(d79*d270)+(d80*d13)-(d81*d195)+(d83*d84)); d17 =
   * ((d93*d272)-(d79*d200)+(d80*d17)-(d81*d198)+(d82*d84)); d20 =
   * ((d4*d187)-(d95*d10)+(d6*d7)-(d2*d86)); d5 =
   * ((d4*d190)-(d95*d14)+(d5*d86)-(d6*d64)); d14 =
   * ((d93*d91)-(d80*d278)+(d81*d122)-(d83*d63)+(d78*d21)); d25 =
   * ((d4*d87)-(d6*d208)+(d3*d10)-(d2*d26)); d7 =
   * ((d4*d181)-(d1*d7)+(d95*d61)-(d2*d19)); d2 =
   * ((d4*d182)-(d1*d10)+(d6*d61)-(d2*d8)); d10 =
   * ((d93*d71)-(d80*d49)+(d81*d20)-(d82*d63)+(d78*d5)); d26 =
   * ((d4*d185)-(d1*d26)+(d6*d12)-(d3*d8)); d3 =
   * ((d4*d191)-(d1*d85)+(d95*d12)-(d3*d19)); d1 =
   * ((d4*d183)-(d1*d86)+(d95*d8)-(d6*d19)); d4 =
   * ((d93*d269)-(d81*d25)+(d82*d278)-(d83*d49)+(d78*d47)); d6 =
   * ((d93*d88)-(d80*d47)+(d81*d121)-(d82*d21)+(d83*d5)); d8 =
   * ((d93*d280)-(d80*d25)+(d82*d122)-(d83*d20)+(d78*d121)); d12 =
   * ((d93*d89)-(d79*d122)+(d80*d209)-(d83*d7)+(d78*d3)); d19 =
   * ((d93*d168)-(d79*d25)+(d82*d209)-(d83*d2)+(d78*d26)); d20 =
   * ((d93*d277)-(d79*d20)+(d80*d2)-(d82*d7)+(d78*d1)); d2 =
   * ((d93*d186)-(d79*d49)+(d81*d2)-(d82*d205)+(d78*d45)); d7 =
   * ((d93*d70)-(d79*d63)+(d80*d205)-(d81*d7)+(d78*d16)); d25 =
   * ((d93*d62)-(d79*d121)+(d80*d26)-(d82*d3)+(d83*d1)); d26 =
   * ((d93*d279)-(d79*d47)+(d81*d26)-(d82*d203)+(d83*d45)); d3 =
   * ((d93*d48)-(d79*d21)+(d80*d203)-(d81*d3)+(d83*d16)); d1 =
   * ((d93*d96)-(d79*d5)+(d80*d45)-(d81*d1)+(d82*d16)); d5 =
   * (1.0/((d150*d287)-(d137*d155)+(d154*d146)-(d157*d134)+
   * (d158*d147)-(d159*d135)+(d222*d153))); result[0] = (d5*d287);
   * result[14] = (d5*d146); result[28] = (d5*d147); result[42] =
   * (d5*d153); result[8] = (d5*((d150*d141)-(d154*d113)+(d157*d142)-(d158*
   * d112)+(d159*d126)-(d222*d237))); result[22] =
   * (d5*((d150*d65)-(d137*d142)+(d154*d250)-(d158*
   * d55)+(d159*d245)-(d222*d286))); result[36] =
   * (d5*((d150*d242)-(d137*d126)+(d154*d114)-(d157*
   * d245)+(d158*d282)-(d222*d152))); result[2] =
   * (d5*((d137*d249)-(d154*d111)+(d157*d127)-(d158*
   * d252)+(d159*d253)-(d222*d254))); result[16] =
   * (d5*((d150*d111)-(d137*d244)+(d157*d283)-(d158*
   * d132)+(d159*d128)-(d222*d248))); result[30] =
   * (d5*((d150*d252)-(d137*d240)+(d154*d132)-(d157*
   * d281)+(d159*d145)-(d222*d53))); result[44] =
   * (d5*((d150*d254)-(d137*d119)+(d154*d248)-(d157*
   * d136)+(d158*d53)-(d159*d140))); result[10] =
   * (d5*((d150*d234)-(d154*d108)+(d157*d235)-(d158*
   * d98)+(d159*d236)-(d222*d107))); result[24] =
   * (d5*((d150*d103)-(d137*d235)+(d154*d56)-(d158*
   * d104)+(d159*d133)-(d222*d105))); result[38] =
   * (d5*((d150*d118)-(d137*d236)+(d154*d99)-(d157*
   * d133)+(d158*d101)-(d222*d102))); result[4] =
   * (d5*((d137*d117)-(d154*d46)+(d157*d36)-(d158*
   * d41)+(d159*d44)-(d222*d43))); result[18] =
   * (d5*((d150*d46)-(d137*d110)+(d157*d31)-(d158*
   * d50)+(d159*d32)-(d222*d33))); result[32] =
   * (d5*((d150*d41)-(d137*d109)+(d154*d50)-(d157*
   * d52)+(d159*d30)-(d222*d29))); result[46] =
   * (d5*((d150*d43)-(d137*d106)+(d154*d33)-(d157*
   * d37)+(d158*d29)-(d159*d34))); result[12] =
   * (d5*((d150*d115)-(d154*d4)+(d157*d8)-(d158*
   * d14)+(d159*d10)-(d222*d6))); result[26] =
   * (d5*((d150*d97)-(d137*d8)+(d154*d19)-(d158*
   * d12)+(d159*d20)-(d222*d25))); result[40] =
   * (d5*((d150*d120)-(d137*d10)+(d154*d2)-(d157*
   * d20)+(d158*d7)-(d222*d1))); result[6] =
   * (d5*((d137*d75)-(d154*d68)+(d157*d15)-(d158*
   * d57)+(d159*d58)-(d222*d22))); result[20] =
   * (d5*((d150*d68)-(d137*d40)+(d157*d23)-(d158*
   * d66)+(d159*d72)-(d222*d18))); result[34] =
   * (d5*((d150*d57)-(d137*d39)+(d154*d66)-(d157*
   * d129)+(d159*d11)-(d222*d13))); result[48] =
   * (d5*((d150*d22)-(d137*d38)+(d154*d18)-(d157*
   * d9)+(d158*d13)-(d159*d17))); d5 = (-d5); result[7] = (d5*d155);
   * result[21] = (d5*d134); result[35] = (d5*d135); result[1] =
   * (d5*((d137*d141)-(d154*d189)+(d157*d65)-(d158*
   * d184)+(d159*d242)-(d222*d284))); result[15] =
   * (d5*((d150*d189)-(d137*d113)+(d157*d250)-(d158*
   * d288)+(d159*d114)-(d222*d285))); result[29] =
   * (d5*((d150*d184)-(d137*d112)+(d154*d288)-(d157*
   * d55)+(d159*d282)-(d222*d156))); result[43] =
   * (d5*((d150*d284)-(d137*d237)+(d154*d285)-(d157*
   * d286)+(d158*d156)-(d159*d152))); result[9] =
   * (d5*((d150*d249)-(d154*d244)+(d157*d223)-(d158*
   * d240)+(d159*d224)-(d222*d119))); result[23] =
   * (d5*((d150*d127)-(d137*d223)+(d154*d283)-(d158*
   * d281)+(d159*d54)-(d222*d136))); result[37] =
   * (d5*((d150*d253)-(d137*d224)+(d154*d128)-(d157*
   * d54)+(d158*d145)-(d222*d140))); result[3] =
   * (d5*((d137*d234)-(d154*d123)+(d157*d103)-(d158*
   * d124)+(d159*d118)-(d222*d144))); result[17] =
   * (d5*((d150*d123)-(d137*d108)+(d157*d56)-(d158*
   * d90)+(d159*d99)-(d222*d100))); result[31] =
   * (d5*((d150*d124)-(d137*d98)+(d154*d90)-(d157*
   * d104)+(d159*d101)-(d222*d67))); result[45] =
   * (d5*((d150*d144)-(d137*d107)+(d154*d100)-(d157*
   * d105)+(d158*d67)-(d159*d102))); result[11] =
   * (d5*((d150*d117)-(d154*d110)+(d157*d268)-(d158*
   * d109)+(d159*d160)-(d222*d106))); result[25] =
   * (d5*((d150*d36)-(d137*d268)+(d154*d31)-(d158*
   * d52)+(d159*d35)-(d222*d37))); result[39] =
   * (d5*((d150*d44)-(d137*d160)+(d154*d32)-(d157*
   * d35)+(d158*d30)-(d222*d34))); result[5] =
   * (d5*((d137*d115)-(d154*d116)+(d157*d97)-(d158*
   * d60)+(d159*d120)-(d222*d51))); result[19] =
   * (d5*((d150*d116)-(d137*d4)+(d157*d19)-(d158*
   * d92)+(d159*d2)-(d222*d26))); result[33] =
   * (d5*((d150*d60)-(d137*d14)+(d154*d92)-(d157*
   * d12)+(d159*d7)-(d222*d3))); result[47] =
   * (d5*((d150*d51)-(d137*d6)+(d154*d26)-(d157*
   * d25)+(d158*d3)-(d159*d1))); result[13] =
   * (d5*((d150*d75)-(d154*d40)+(d157*d28)-(d158*
   * d39)+(d159*d125)-(d222*d38))); result[27] =
   * (d5*((d150*d15)-(d137*d28)+(d154*d23)-(d158*
   * d129)+(d159*d24)-(d222*d9))); result[41] =
   * (d5*((d150*d58)-(d137*d125)+(d154*d72)-(d157*
   * d24)+(d158*d11)-(d222*d17))); } }
   */
  };

  /**
   * calculates the inverse of the matrix by using the optimal algorithm
   * 
   * @param mat
   *          the data of the matrix
   * @param l =
   *          m, n = height and width of the matrix
   * @param result
   *          the matrix to put the result into
   */
  public static void invert(double mat[], int l, double result[]) {
    if (l < 7)
      FAST_INVERSE[l - 1].invert(mat, result);
    else
      new LUDecomposition(l, l, mat).invert(result);
  }
}
